package com.example.strategicassetallocationassistant

import androidx.compose.material3.*
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Warning
import androidx.compose.ui.Alignment
import java.time.format.DateTimeFormatter
import com.example.strategicassetallocationassistant.ui.common.model.AssetInfo

/**
 * ÂèØÂ§çÁî®ÁöÑÂçïÂÖÉÊ†ºÁªÑ‰ª∂Â∫ìÔºåÁî®‰∫éÂú®‰∏çÂêåÂàó/ÁªÑÂêàÂàó‰∏≠ÊòæÁ§∫Áõ∏ÂêåÁöÑËµÑ‰∫ßÊåáÊ†áÊï∞ÊçÆ„ÄÇ
 */
object AssetMetricsCells {

    /** ‰π∞ÂÖ•Âõ†Â≠êÔºàÁôæÂàÜÊØîÔºåÈ¢úËâ≤ PrimaryÔºâ */
    @Composable
    fun BuyFactor(info: AssetInfo) {
        Text(
            text = info.buyFactor?.let { "üè∑Ô∏è${String.format("%.2f", it * 100)}" } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.primary,
            textAlign = TextAlign.Center
        )
    }

    /** ÂçñÂá∫ÈòàÂÄºÔºàÁôæÂàÜÊØîÔºåÈ¢úËâ≤ TertiaryÔºâ */
    @Composable
    fun SellThreshold(info: AssetInfo) {
        Text(
            text = info.sellThreshold?.let { "+${String.format("%.2f", it * info.asset.targetWeight * 100)}%Âçñ" } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.tertiary,
            textAlign = TextAlign.Center
        )
    }

    /** Ê≥¢Âä®ÁéáÔºàÁôæÂàÜÊØîÔºåÈªòËÆ§È¢úËâ≤Ôºâ */
    @Composable
    fun Volatility(info: AssetInfo) {
        Text(
            text = info.volatility?.let { "„Ä∞Ô∏è${String.format("%.2f%%", it * 100)}" } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** ‰∏ÉÊó•Ê∂®Ë∑åÂπÖÔºàÈ¢úËâ≤Ê≠£:Primary Ë¥ü:ErrorÔºâ */
    @Composable
    fun SevenDayReturn(info: AssetInfo) {
        val pct = info.sevenDayReturn
        if (pct != null) {
            Text(
                text = "‰∏É${if (pct >= 0) "+" else ""}${String.format("%.2f%%", pct * 100)}",
                style = MaterialTheme.typography.bodySmall,
                color = if (pct >= 0) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error,
                textAlign = TextAlign.Center
            )
        } else {
            Text("-", style = MaterialTheme.typography.bodySmall, textAlign = TextAlign.Center)
        }
    }

    /** Áõ∏ÂØπÂÅèÁßª r */
    @Composable
    fun RelativeOffset(info: AssetInfo) {
        Text(
            text = info.relativeOffset?.let { String.format("R%.2f%%", it*100) } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** ÂÅèÁßªÂõ†Â≠ê E */
    @Composable
    fun OffsetFactor(info: AssetInfo) {
        Text(
            text = info.offsetFactor?.let { String.format("ÂÅèÂõ†%.2f%%", it*100) } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.outline,
            textAlign = TextAlign.Center
        )
    }

    /** Ë∑åÂπÖÂõ†Â≠ê D */
    @Composable
    fun DrawdownFactor(info: AssetInfo) {
        Text(
            text = info.drawdownFactor?.let { String.format("Ë∑åÂõ†%.2f%%", it*100) } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.tertiary,
            textAlign = TextAlign.Center
        )
    }

    /** ÂéªÊ≥¢Âä®‰π∞ÂÖ•Âõ†Â≠ê */
    @Composable
    fun PreVolatilityBuyFactor(info: AssetInfo) {
        Text(
            text = info.preVolatilityBuyFactor?.let { String.format("üè∑Ô∏è%.2f%%", it*100) } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.secondary,
            textAlign = TextAlign.Center
        )
    }

    /** ËµÑ‰∫ßÈ£éÈô© */
    @Composable
    fun AssetRisk(info: AssetInfo) {
        Text(
            text = info.assetRisk?.let { String.format("üé≤%.6f", it) } ?: "-",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** ÂΩìÂâçÂç†ÊØî */
    @Composable
    fun CurrentWeight(info: AssetInfo) {
        Text(
            text = String.format("%.2f%%", info.currentWeight * 100),
            style = MaterialTheme.typography.bodySmall,
            fontWeight = FontWeight.Medium,
            textAlign = TextAlign.Center
        )
    }

    /** ÁõÆÊ†áÂç†ÊØî */
    @Composable
    fun TargetWeight(info: AssetInfo) {
        Text(
            text = "= ${(info.asset.targetWeight * 100).toInt()}%",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** Âç†ÊØîÂÅèÂ∑ÆÔºàÈ¢úËâ≤Ê†πÊçÆÊ≠£Ë¥üÔºâ */
    @Composable
    fun WeightDeviation(info: AssetInfo) {
        val dev = info.deviationPct
        Text(
            text = "${if (dev >= 0) "+" else ""}${String.format("%.2f%%", dev * 100)}",
            style = MaterialTheme.typography.bodySmall,
            color = if (dev >= 0) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error,
            textAlign = TextAlign.Center
        )
    }

    /** Âçï‰ª∑ */
    @Composable
    fun UnitPrice(info: AssetInfo) {
        Text(
            text = "¬•${String.format("%.4f", info.asset.unitValue ?: 0.0)}",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** ‰ªΩÈ¢ù */
    @Composable
    fun Shares(info: AssetInfo, isHidden: Boolean) {
        Text(
            text = if (isHidden) "***" else "√ó${String.format("%.2f", info.asset.shares ?: 0.0)}",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** ÂΩìÂâçÂ∏ÇÂÄº */
    @Composable
    fun CurrentMarketValue(info: AssetInfo, isHidden: Boolean) {
        Text(
            text = if (isHidden) "***" else "¬•${String.format("%.2f", info.marketValue)}",
            style = MaterialTheme.typography.bodySmall,
            fontWeight = FontWeight.Medium,
            textAlign = TextAlign.Center
        )
    }

    /** ÁõÆÊ†áÂ∏ÇÂÄº */
    @Composable
    fun TargetMarketValue(info: AssetInfo, isHidden: Boolean) {
        Text(
            text = if (isHidden) "***" else "= ¬•${String.format("%.2f", info.targetMarketValue)}",
            style = MaterialTheme.typography.bodySmall,
            textAlign = TextAlign.Center
        )
    }

    /** Â∏ÇÂÄºÂÅèÂ∑ÆÔºàÈ¢úËâ≤Ê†πÊçÆÊ≠£Ë¥üÔºâ */
    @Composable
    fun MarketValueDeviation(info: AssetInfo, isHidden: Boolean) {
        val dev = info.deviationValue
        Text(
            text = if (isHidden) "***" else "${if (dev >= 0) "+" else ""}¬•${String.format("%.2f", dev)}",
            style = MaterialTheme.typography.bodySmall,
            color = if (dev >= 0) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error,
            textAlign = TextAlign.Center
        )
    }

    /** Êõ¥Êñ∞Êó∂Èó¥ÔºàÊó∂ÂàÜÁßíÔºâ */
    @Composable
    fun UpdateTimeClock(info: AssetInfo) {
        val time = info.asset.lastUpdateTime
        Text(
            text = time?.format(DateTimeFormatter.ofPattern("HH:mm:ss")) ?: "-",
            style = MaterialTheme.typography.bodySmall.copy(fontSize = 12.sp),
            textAlign = TextAlign.Center
        )
    }

    /** Êõ¥Êñ∞Êó∂Èó¥ÔºàÊó•ÊúüÔºâ */
    @Composable
    fun UpdateTimeDate(info: AssetInfo) {
        val time = info.asset.lastUpdateTime
        if (time != null) {
            Text(
                text = time.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                style = MaterialTheme.typography.bodySmall.copy(fontSize = 10.sp),
                textAlign = TextAlign.Center
            )
        }
    }

    /** Â§áÊ≥® */
    @Composable
    fun Note(info: AssetInfo) {
        Text(
            text = info.asset.note ?: "",
            style = MaterialTheme.typography.bodySmall,
            maxLines = 1,
            overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis
        )
    }

    /** ËµÑ‰∫ßÂêçÁß∞ + ÈîôËØØÊåáÁ§∫ */
    @Composable
    fun AssetName(info: AssetInfo) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(2.dp)
        ) {
            Text(
                text = info.asset.name,
                style = MaterialTheme.typography.bodySmall,
                fontWeight = FontWeight.Medium,
                color = MaterialTheme.colorScheme.primary
            )
            if (info.isRefreshFailed) {
                Icon(
                    imageVector = Icons.Default.Warning,
                    contentDescription = "Âà∑Êñ∞Â§±Ë¥•",
                    tint = MaterialTheme.colorScheme.error,
                    modifier = Modifier.size(12.dp)
                )
            }
        }
    }
}


